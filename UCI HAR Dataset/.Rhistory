NA
} else {
10
}
y
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
5+7
x<-5+7
x
y<-x-3
y
source('~/MOOC/JHU_3_GCD/downloadScriptFinal.R')
source('~/MOOC/JHU_3_GCD/downloadScriptFinal.R')
?htmlParse
source('~/MOOC/JHU_3_GCD/downloadScriptFinal.R')
source('~/MOOC/JHU_3_GCD/downloadScript.R')
source('~/MOOC/JHU_3_GCD/downloadScriptFinal.R')
source('~/MOOC/JHU_3_GCD/Assignment2.R')
x = [1,2,3,4,5,6,7,8]
x = c(1,2,3,4,5,6,7,8)
cachemean(x)
x = list(1,2,3,4,5)
cachemean(x)
x = makeVector(1,2,3,4,5,6)
x = makeVector(c(1,2,3,4,5,6)
)
cachemean(x)
cachemean(x)
source('~/MOOC/JHU_3_GCD/Assignment2.R')
cachemean(x)
cachemean(x)
source('~/MOOC/JHU_3_GCD/Assignment2.R')
x = makeVector(c(1,2,3,4,5,6)
)
x = makeVector(c(1,2,3,4,5,6))
cachemean(x)
cachemean(x)
source('~/MOOC/JHU_3_GCD/Assignment2.R')
x = makeVector(c(1,2,3,4,5,6))
cachemean(x)
cachemean(x)
cachemean(x)
mat = matrix(1:6, 2,3)
mat
class(mat)
x = (1,2,3,4)
x = 1:6
class(x)
source('~/MOOC/JHU_3_GCD/Assignment2_1.R')
mat1 = matrix( c(4,3,3,2), 2,2)
makeCacheMatrix(mat1)
m = makeCacheMatrix(mat1)
cacheSolve(m)
m
source('~/MOOC/JHU_3_GCD/Assignment2_1.R')
mat1 = matrix( c(4,3,3,2), 2,2)
m = makeCacheMatrix(mat1)
cacheSolve(m)
cacheSolve(m)
?message
source('~/MOOC/JHU_3_GCD/Assignment2_1.R')
source('~/MOOC/JHU_3_GCD/Assignment2_1.R')
source('~/MOOC/JHU_2_RP/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
mat1 = matrix( c(4,3,3,2), 2,2)
cmat = makeCacheMatrix(mat1)
cacheSolve(cmat) # First time - calculate using solve()
cacheSolve(cmat) # Following times - simply retrieve answer
gettwd()
getwd()
setwd("MOOC/JHU_3_GCD/UCI HAR Dataset/"
)
?read.table
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
features
head(features)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(testY)
dim(testY)
dim(testX)
head(testX)
dim(testX)
dim(features)
head(features)
names(testX) = features$V2
head(testX)
dim(testY)
dim(testX)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(testX)
head(activity)
activity
levels(activity)
class(activity)
class(activity$V1)
names(activity)
class(activity$V1) = factor
class(activity$V1) = "factor"
class(activity$V1)
class(activity$V1) = "integer"
class(activity$V1)
activity$V1 = as.factor(activity$V1)
str(activity)
head(activityLabels)
levels(activity$V1)
levels(activity$V1) = activityLabels$V2
activity$V1
df = cbind(activity$V1, data)
head(df)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(df)
?cbind
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(df)
dim(df)
dim(df[1])
head(df[1])
head(df[1],10)
names(df))
names(df)
df$angle(tBodyAccJerkMean),gravityMean)
test_subject = read.table("test//subject_test.txt")
train_subject = read.table("train//subject_train.txt")
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(df[1:5])
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(df[1:5])
names(df)
?gsub
gsub("()", "", names(df))
sapply( names(df), gsub("()", "", names(df)) )
sapply( names(df), function(x) gsub("()", "", x )
)
gsub("\\(\\)", "", names(df))
gsub("\(\)", "", names(df))
gsub("\\(\\)", "", names(df))
names(df) = gsub("\\(\\)", "", names(df))
head(df[1:5])
names(df) = gsub("-", "_", names(df))
head(df[1:5])
names(df)
names(df) = gsub(",", "_", names(df))
names(df)
df$angle(tBodyAccMean_gravity)
names(df) = gsub("(", "_", names(df))
names(df) = gsub("\\(", "_", names(df))
names(df)
names(df) = gsub("\\)", "", names(df))
names(df)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
?grep
grep("^mean", names(df), ignore.case=TRUE)
grep("mean", names(df), ignore.case=TRUE)
grep("mean", names(df), ignore.case=TRUE, value-TRUE)
grep("mean", names(df), ignore.case=TRUE, value=TRUE)
grep("mean", names(df), ignore.case=TRUE)
grep("std", names(df), ignore.case=TRUE)
meanCols = grep("mean", names(df), ignore.case=TRUE)
stdCols = grep("std", names(df), ignore.case=TRUE)
names(df)[meanCols]
names(df)[meanCols | stdCols]
meanCols
stdCols
c(meanCols, stdCols)
sort(c(meanCols, stdCols))
df[c(meanCols, stdCols)]
head(df[c(meanCols, stdCols)])
head(df[sort(c(meanCols, stdCols))])
df = df[sort(c(meanCols, stdCols))]
names(df)
## Reading from file
test_data = read.table("test//X_test.txt")
test_activity = read.table("test//y_test.txt")
test_subject = read.table("test//subject_test.txt")
train_data = read.table("train//X_train.txt")
train_activity = read.table("train//y_train.txt")
train_subject = read.table("train//subject_train.txt")
activityLabels = read.table("activity_labels.txt")
dataLabels = read.table("features.txt")
## Merge test and train datasets
data = rbind(test_data, train_data)
activity = rbind(test_activity, train_activity)
subject = rbind(test_subject, train_subject)
## Rename variables in data using dataLabels
names(data) = dataLabels$V2
## Retain only "mean" or "std" columns
meanCols = grep("mean", names(df), ignore.case=TRUE)
stdCols = grep("std", names(df), ignore.case=TRUE)
df = df[sort(c(meanCols, stdCols))]
names(df)
## Reading from file
test_data = read.table("test//X_test.txt")
test_activity = read.table("test//y_test.txt")
test_subject = read.table("test//subject_test.txt")
train_data = read.table("train//X_train.txt")
train_activity = read.table("train//y_train.txt")
train_subject = read.table("train//subject_train.txt")
activityLabels = read.table("activity_labels.txt")
dataLabels = read.table("features.txt")
## Merge test and train datasets
data = rbind(test_data, train_data)
activity = rbind(test_activity, train_activity)
subject = rbind(test_subject, train_subject)
## Rename variables in data using dataLabels
names(data) = dataLabels$V2
## Retain only "mean" or "std" columns
meanCols = grep("mean", names(data), ignore.case=TRUE)
stdCols = grep("std", names(data), ignore.case=TRUE)
data = data[sort(c(meanCols, stdCols))]
names(data)
names(data) = gsub("\\(\\)", "", names(data)) # Remove "()"
names(data) = gsub("-", "_", names(data)) # Replace "-" with "_"
names(data) = gsub(",", "_", names(data)) # Replace "," with "_"
names(data) = gsub("\\(", "_", names(data)) # Replace "(" with "_"
names(data) = gsub("\\)", "", names(data)) # Remove ")"
names(data)
activity$V1 = as.factor(activity$V1)
levels(activity$V1) = activityLabels$V2
df = cbind(subject$V1, activity$V1, data)
head(df)
colnames(df)[colnames(df) == "subject$V1"] = "Subject"
colnames(df)[colnames(df) == "activity$V1"] = "Activity"
head(df)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(df[1:5], 20)
head(df[1:5], 100)
head(df[1:5], 1000)
?split
df
split(df, df$Activity)
split(head(df), df$Subject)[1:5]
split(head(df), df$Subject)
split(df, df$Subject)
head(split(df, df$Subject))
head(split(df, df$Subject))[1:5]
df
head(df[1:5])
head(df[1:5],500)
sub = head(df[1:5],500)
split(sub, sub$Subject)
splits = split(sub, sub$Subject)
library(plyr)
install.packages("plyr")
library(plyr)
ddply(splits, .(Activity), summarize, mean = mean())
split[1]
splits[1]
splits[1][3:]
splits[1][3:5]
splits[1][3:5,]
splits[1]
testDF = splits[1]
testDF[,3:5]
dim(testDF)
class(testDF)
testDF = splits[[1]
]
class(testDF)
testDF[,3:5]
testDF[,3:]
testDF[,3:ncol(testDF)]
sapply(testDF[,3:ncol(testDF)], mean)
ddply(testDF, .(Activity), summarize, mean=mean())
?ddply
ddply(testDF, .(Activity), summarize, mean=mean(c(cols(testDF))))
mean(testDF)
cols
?col
testDF[,3:5]
testDF
ddply(testDF, .(Activity), meanTBODY = mean(testDF$tBodyAcc_mean_X))
head(ddply(testDF, .(Activity), meanTBODY = mean(testDF$tBodyAcc_mean_X)))
head(ddply(testDF, .(Activity), tBodyAcc_mean_X = mean(testDF$tBodyAcc_mean_X)))
head(ddply(testDF, .(Activity), summarise, tBodyAcc_mean_X = mean(testDF$tBodyAcc_mean_X)))
head(ddply(testDF, .(Activity), summarise, mean(testDF$tBodyAcc_mean_X)))
head(ddply(testDF, .(Activity), summarise, mean(col(testDF)))
)
head(ddply(testDF, .(Activity), summarise, mean(names(testDF) ))
)
head(ddply(testDF, .(Activity), summarise, mean(names(testDF) )))
?colMeans
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
head(splitframes)
head(df)
splitframes = split(df, df$Subject)
splitframes[[1]]
head(splitframes[[1]])
colMeans(splitframes[[1]])
splitframes[[1]]
class(splitframes[[1]])
split = splitframes[[1]]
split[3:ncol(split)]
split[3:ncol(split)]
colMeans(split[3:ncol(split)])
?tapply
?ddply
ddply(splitframes, summarize, colMeans)
lala  = colMeans(split[3:ncol(split)])
class(lala)
data.frame(lala)
lala  = colMeans(split[3:ncol(split)])
colMeans(split[3:ncol(split)])
colMeans(split)
?colMeans
frame = splitframes[[1]]
frame = split(frame, frame$Activity)
frame
head(frame[1:3])
head(frame)
head(frame, 5)
frame[1]
class(frame)
frame = splitframes[[1]]
class(frame)
frame[1]
head(frame)
frame = split(frame, frame$Activity)
f = frame[[1]]
f
head(f)
head(f[1:10])
head(f[1:10],20)
f[1:10]
## New data frame
splitframes = split(df, df$Activity)
splitframes[[1]]
s = splitframes[[1]]
s[1]
s[1:2]
splitframes = split(splitframes, df$Activity)
lapply(splitframes, split, .(Activity))
?lapply
lapply(splitframes, function(frame) split(frame, frame$Activity) )
splitframes = split(df, df$Subject)
lapply(splitframes, split(frame), frame$Activity )
lapply(splitframes, split(), frame, frame$Activity )
?split
lapply(splitframes, split, x = frame, f = frame$Activity )
lapply(splitframes, dim)
splitframes = split(df, c(df$Subject, df$Activity))
splitframes = split(df, c(df$Subject)
splitframes = split(df, c(df$Subject))
splitframes = split(df, df$Subject)
splitframes = split(df, list(df$Subject,df$Activity) )
splitframes
s = splitframes[[1]]
head(s[1:5])
s[1:5]
s[1:5]
colMeans(s[-2])
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
frame = splitframe[[1]]
frame = splitframes[[1]]
frame[1:5]
lapply(splitframes[1:5], colMeans)
df$Activity = as.numeric(df$Activity)
lapply(splitframes[1:5], colMeans)
s = splitframes[1:5]
colMeans(s)
s
s = splitframes[[1]]
s = s[1:5]
s
colMeans(s)
s$Activity = as.numeric(s$Activity)
colMeans(s)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
splitframes
df2 = unsplit(splitframes, list(df$Subject,df$Activity))
df2
splitframes[[1]]
class(splitframes[[1]])
data.frame(splitframes[[1]])
?data.frame
splitframes = split(df, list(df$Subject,df$Activity))
splitframes = lapply(splitframes, function(frame) {
colMeans(frame)
frame = data.frame(frame)} )
splitframes
splitframes = split(df, list(df$Subject,df$Activity))
splitframes = lapply(splitframes, function(frame) {
frame = colMeans(frame)
frame = data.frame(frame)} )
splitframes
splitframes = split(df, list(df$Subject,df$Activity))
splitframes = lapply(splitframes, function(Value) {
Value = colMeans(Value)
Value = data.frame(Value)} )
df2 = unsplit(splitframes, list(df$Subject,df$Activity))
splitframes
df2 = data.frame(splitframes)
str(df2)
head(df2)
t(df)
?t
head(df2)
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes = lapply(splitframes, function(Value) {
Value = colMeans(Value)
Value = data.frame(Value)} )
splitframes
splitframes = lapply(splitframes, colMeans)
splitframes
splitframes = sapply(splitframes, colMeans)
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes = sapply(splitframes, colMeans)
splitframes
df2 = unsplit(splitframes, factors)
head(df2)
df2
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes
df2 = unsplit(splitframes, factors)
head(df2[1:5])
class(splitframes)
?apply
splitframes = lapply(splitframes, colMeans)
class(splitframes)
head(splitframes[[1]])
class(splitframes[[1]])
df2 = rbind(splitframes)
head(df2)
# Convert the levels in Activity to integers for now - makes life easier
levels(df$Activity) = c(1,2,3,4,5,6)
df$Activity = as.numeric(df$Activity)
# Split by intersection of Subject & Activity, find means
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes = lapply(splitframes, colMeans)
splitframes[[1]]
class(splitframes[[1]])
rbind(splitframes[[1]], splitframes[[2]])
df2 = rbind(splitframes[[1:length(splitframes)]])
df2 = rbind(splitframes)
df2
df2 = rbindlist(splitframes)
df2 = data.frame()
df2 = data.frame(splitframes)
df2
head(df2)
# Split by intersection of Subject & Activity, find means
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes = sapply(splitframes, colMeans)
class(splitframes[[1]])
splitframes[[1]]
splitframes[1]
splitframes
# Convert the levels in Activity to integers for now - makes life easier
levels(df$Activity) = c(1,2,3,4,5,6)
df$Activity = as.numeric(df$Activity)
# Split by intersection of Subject & Activity, find means
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes = sapply(splitframes, colMeans)
head(splitframes)
class(splitframes)
t(splitframes)
head(t(splitframes))
df2 = t(splitframes)
levels(df$Activity) = c(1,2,3,4,5,6)
df$Activity = as.numeric(df$Activity)
# Split by intersection of Subject & Activity, find means
factors = list(df$Subject,df$Activity)
splitframes = split(df, factors)
splitframes = sapply(splitframes, colMeans)
# Rejoin everything into a new tidy data frame
df2 = t(splitframes)
head(df2)
head(df2[1:5])
df2[1:5]
df2
df2[,1:5]
# Convert levels in Activity back to factor labels
df2$Activity = as.factor(df2$Activity))
levels(df2$Activity) = activityLabels$V2
df2
df2 = data.frame(df2)
df2
df2[1:5]
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
df2$Activity
df2 = data.frame(t(splitframes)) # t will transpose the matrix
# Convert levels in Activity back to factor labels
df2$Activity = as.factor(df2$Activity)
levels(df2$Activity) = activityLabels$V2
df2[1:5]
df2 = df2[order(df2$Subject, df$Activity)]
?order
df2 = dd[with(dd, order(Subject, Activity))]
df2 = df2[with(df2, order(Subject, Activity))]
names(df2)
?sort
order(df2$Subject)
order(df2$Subject, df2$Activity)
df2[order(df2$Subject, df2$Activity)]
df2[order(df2$Subject, df2$Activity),]
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/project.R')
df2
head(df2)
dim(df2)
head(df2)
str(df2)
source('~/MOOC/JHU_3_GCD/UCI HAR Dataset/run_analysis.R')
